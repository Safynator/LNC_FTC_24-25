package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import java.util.List;
import org.firstinspires.ftc.robotcore.external.JavaUtil;
import org.firstinspires.ftc.robotcore.external.hardware.camera.BuiltinCameraDirection;
import org.firstinspires.ftc.robotcore.external.hardware.camera.WebcamName;
import org.firstinspires.ftc.robotcore.external.tfod.Recognition;
import org.firstinspires.ftc.vision.VisionPortal;
import org.firstinspires.ftc.vision.tfod.TfodProcessor;

@Autonomous(name = "REDBACK (Blocks to Java)")
public class REDBACK extends LinearOpMode {

  private DcMotor bl;
  private DcMotor fl;
  private DcMotor rarm;
  private DcMotor larm;
  private DcMotor br;
  private DcMotor fr;

  List<Recognition> myTfodRecognitions;
  double TURN_SPEED;
  boolean USE_WEBCAM;
  TfodProcessor myTfodProcessor;
  VisionPortal myVisionPortal;

  /**
   * This function is executed when this Op Mode is selected from the Driver Station.
   */
  @Override
  public void runOpMode() {
    int DETECTIONS_PER_RUN;
    int number_of_detections;

    bl = hardwareMap.get(DcMotor.class, "bl");
    fl = hardwareMap.get(DcMotor.class, "fl");
    rarm = hardwareMap.get(DcMotor.class, "rarm");
    larm = hardwareMap.get(DcMotor.class, "larm");
    br = hardwareMap.get(DcMotor.class, "br");
    fr = hardwareMap.get(DcMotor.class, "fr");

    // This 2023-2024 OpMode illustrates the basics of TensorFlow Object Detection, using
    // a custom TFLite object detection model.
    USE_WEBCAM = true;
    TURN_SPEED = 0.2;
    DETECTIONS_PER_RUN = 60;
    // Initialize TFOD before waitForStart.
    initTfod();
    // Wait for the match to begin.
    bl.setDirection(DcMotorSimple.Direction.REVERSE);
    fl.setDirection(DcMotorSimple.Direction.REVERSE);
    rarm.setDirection(DcMotorSimple.Direction.REVERSE);
    telemetry.addData("DS preview on/off", "3 dots, Camera Stream");
    telemetry.addData(">", "Touch Play to start OpMode");
    number_of_detections = JavaUtil.listLength(myTfodRecognitions);
    telemetry.update();
    waitForStart();
    if (opModeIsActive()) {
      // Put run blocks here.
      for (int count = 0; count < DETECTIONS_PER_RUN; count++) {
        // Put loop blocks here.
        telemetryTfod();
        // Push telemetry to the Driver Station.
        telemetry.update();
        if (gamepad1.dpad_down) {
          // Temporarily stop the streaming session.
          myVisionPortal.stopStreaming();
        } else if (gamepad1.dpad_up) {
          // Resume the streaming session if previously stopped.
          myVisionPortal.resumeStreaming();
        }
        // Share the CPU.
        sleep(20);
        number_of_detections = JavaUtil.listLength(myTfodRecognitions);
        telemetry.addLine("N-O-D: " + JavaUtil.formatNumber(number_of_detections, 0));
      }
      if (number_of_detections == 1) {
        Middle();
      } else {
        encoderdrive(190, 190, 0.5);
        encoderdriveturn(-366, -43, 0.5, 0.5);
        for (int count2 = 0; count2 < DETECTIONS_PER_RUN; count2++) {
          // Put loop blocks here.
          telemetryTfod();
          // Push telemetry to the Driver Station.
          telemetry.update();
          if (gamepad1.dpad_down) {
            // Temporarily stop the streaming session.
            myVisionPortal.stopStreaming();
          } else if (gamepad1.dpad_up) {
            // Resume the streaming session if previously stopped.
            myVisionPortal.resumeStreaming();
          }
          // Share the CPU.
          sleep(20);
          number_of_detections = JavaUtil.listLength(myTfodRecognitions);
          telemetry.addLine("N-O-D: " + JavaUtil.formatNumber(number_of_detections, 0));
        }
        if (number_of_detections == 1) {
          Right();
        } else {
          Left();
          for (int count3 = 0; count3 < DETECTIONS_PER_RUN; count3++) {
            // Put loop blocks here.
            telemetryTfod();
            // Push telemetry to the Driver Station.
            telemetry.update();
            if (gamepad1.dpad_down) {
              // Temporarily stop the streaming session.
              myVisionPortal.stopStreaming();
            } else if (gamepad1.dpad_up) {
              // Resume the streaming session if previously stopped.
              myVisionPortal.resumeStreaming();
            }
            // Share the CPU.
            sleep(20);
            number_of_detections = JavaUtil.listLength(myTfodRecognitions);
            telemetry.addLine("N-O-D: " + JavaUtil.formatNumber(number_of_detections, 0));
          }
          if (number_of_detections == 1) {
            larm.setTargetPosition(120);
            rarm.setTargetPosition(-120);
            larm.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            rarm.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            larm.setPower(0.6);
            rarm.setPower(0.6);
          } else {
            TURN_LEFT();
            sleep(300);
            Turn_RIGHT();
            sleep(300);
            sTOP();
          }
        }
      }
    }
  }

  /**
   * Describe this function...
   */
  private void encoderdrive(int RightTarget, int LeftTarget, double Speed) {
    bl.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    br.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    br.setTargetPosition(RightTarget);
    bl.setTargetPosition(LeftTarget);
    bl.setMode(DcMotor.RunMode.RUN_TO_POSITION);
    br.setMode(DcMotor.RunMode.RUN_TO_POSITION);
    bl.setPower(Speed);
    br.setPower(Speed);
    while (opModeIsActive() && bl.isBusy() && br.isBusy()) {
      idle();
    }
  }

  /**
   * Describe this function...
   */
  private void Turn_RIGHT() {
    bl.setPower(TURN_SPEED);
    br.setPower(-TURN_SPEED);
    fl.setPower(TURN_SPEED);
    fr.setPower(-TURN_SPEED);
  }

  /**
   * Initialize TensorFlow Object Detection.
   */
  private void initTfod() {
    TfodProcessor.Builder myTfodProcessorBuilder;
    VisionPortal.Builder myVisionPortalBuilder;

    // First, create a TfodProcessor.Builder.
    myTfodProcessorBuilder = new TfodProcessor.Builder();
    // Set the name of the file where the model can be found.
    myTfodProcessorBuilder.setModelFileName("RedKnight.tflite");
    // Set the full ordered list of labels the model is trained to recognize.
    myTfodProcessorBuilder.setModelLabels(JavaUtil.createListWith("Knight"));
    // Set the aspect ratio for the images used when the model was created.
    myTfodProcessorBuilder.setModelAspectRatio(16 / 9);
    // Create a TfodProcessor by calling build.
    myTfodProcessor = myTfodProcessorBuilder.build();
    // Next, create a VisionPortal.Builder and set attributes related to the camera.
    myVisionPortalBuilder = new VisionPortal.Builder();
    if (USE_WEBCAM) {
      // Use a webcam.
      myVisionPortalBuilder.setCamera(hardwareMap.get(WebcamName.class, "Webcam 1"));
    } else {
      // Use the device's back camera.
      myVisionPortalBuilder.setCamera(BuiltinCameraDirection.BACK);
    }
    // Add myTfodProcessor to the VisionPortal.Builder.
    myVisionPortalBuilder.addProcessor(myTfodProcessor);
    // Create a VisionPortal by calling build.
    myVisionPortal = myVisionPortalBuilder.build();
  }

  /**
   * Describe this function...
   */
  private void TURN_LEFT() {
    bl.setPower(-TURN_SPEED);
    br.setPower(TURN_SPEED);
    fl.setPower(-TURN_SPEED);
    fr.setPower(TURN_SPEED);
  }

  /**
   * Describe this function...
   */
  private void Middle() {
    encoderdrive(1040, 1040, 0.5);
    arm(65, 65, 0.5);
    sleep(1000);
    encoderdrive(-200, -200, 0.5);
    arm(-65, -65, 0.5);
    encoderdrive(250, 250, 0.5);
    sleep(500);
  }

  /**
   * Describe this function...
   */
  private void Right() {
    encoderdrive(900, 900, 0.5);
    arm(65, 65, 0.5);
    sleep(1000);
    encoderdrive(-200, -200, 0.5);
    arm(-65, -65, 0.5);
    sleep(500);
  }

  /**
   * Describe this function...
   */
  private void arm(int rarmTarget, int larmTarget, double Speed) {
    larm.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    rarm.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    larm.setTargetPosition(larmTarget);
    rarm.setTargetPosition(rarmTarget);
    larm.setMode(DcMotor.RunMode.RUN_TO_POSITION);
    rarm.setMode(DcMotor.RunMode.RUN_TO_POSITION);
    larm.setPower(Speed);
    rarm.setPower(Speed);
    while (opModeIsActive() && bl.isBusy() && br.isBusy()) {
      idle();
    }
  }

  /**
   * Describe this function...
   */
  private void Left() {
    encoderdriveturn(366, 43, 0.5, 0.5);
    encoderdrive(600, 600, 0.5);
    encoderdriveturn(1350, 500, 0.5, 0.5);
    arm(65, 65, 0.5);
    sleep(500);
    encoderdrive(-200, -200, 0.5);
    arm(-65, -65, 0.5);
    encoderdrive(400, 400, 0.5);
    encoderdrive(-500, -500, 0.5);
    sleep(500);
  }

  /**
   * Display info (using telemetry) for a detected object
   */
  private void telemetryTfod() {
    Recognition myTfodRecognition;
    float x;
    float y;

    // Get a list of recognitions from TFOD.
    myTfodRecognitions = myTfodProcessor.getRecognitions();
    telemetry.addData("# Objects Detected", JavaUtil.listLength(myTfodRecognitions));
    // Iterate through list and call a function to
    // display info for each recognized object.
    for (Recognition myTfodRecognition_item : myTfodRecognitions) {
      myTfodRecognition = myTfodRecognition_item;
      // Display info about the recognition.
      telemetry.addLine("");
      // Display label and confidence.
      // Display the label and confidence for the recognition.
      telemetry.addData("Image", myTfodRecognition.getLabel() + " (" + JavaUtil.formatNumber(myTfodRecognition.getConfidence() * 100, 0) + " % Conf.)");
      // Display position.
      x = (myTfodRecognition.getLeft() + myTfodRecognition.getRight()) / 2;
      y = (myTfodRecognition.getTop() + myTfodRecognition.getBottom()) / 2;
      // Display the position of the center of the detection boundary for the recognition
      telemetry.addData("- Position", JavaUtil.formatNumber(x, 0) + ", " + JavaUtil.formatNumber(y, 0));
      // Display size
      // Display the size of detection boundary for the recognition
      telemetry.addData("- Size", JavaUtil.formatNumber(myTfodRecognition.getWidth(), 0) + " x " + JavaUtil.formatNumber(myTfodRecognition.getHeight(), 0));
    }
  }

  /**
   * Describe this function...
   */
  private void Strafe_Left() {
    bl.setPower(0.5);
    br.setPower(-0.5);
    fl.setPower(-0.5);
    fr.setPower(0.5);
  }

  /**
   * Describe this function...
   */
  private void sTOP() {
    bl.setPower(-bl.getPower());
    br.setPower(-br.getPower());
    fl.setPower(-fl.getPower());
    fr.setPower(-fr.getPower());
    sleep(200);
    bl.setPower(0);
    br.setPower(0);
    fl.setPower(0);
    fr.setPower(0);
  }

  /**
   * Describe this function...
   */
  private void Strafe_Right() {
    bl.setPower(-0.5);
    br.setPower(0.5);
    fl.setPower(0.5);
    fr.setPower(-0.5);
  }

  /**
   * Describe this function...
   */
  private void encoderdrivestrafe(int FrontTarget, int BackTarget, double BackSpeed, double FrontSpeed) {
    bl.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    br.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    fl.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    fr.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    br.setTargetPosition(BackTarget);
    bl.setTargetPosition(-BackTarget);
    fr.setTargetPosition(-FrontTarget);
    fl.setTargetPosition(FrontTarget);
    bl.setMode(DcMotor.RunMode.RUN_TO_POSITION);
    br.setMode(DcMotor.RunMode.RUN_TO_POSITION);
    fr.setMode(DcMotor.RunMode.RUN_TO_POSITION);
    fl.setMode(DcMotor.RunMode.RUN_TO_POSITION);
    bl.setPower(BackSpeed);
    br.setPower(BackSpeed);
    fl.setPower(FrontSpeed);
    fr.setPower(FrontSpeed);
    while (opModeIsActive() && bl.isBusy() && br.isBusy()) {
      idle();
    }
    sleep(10);
    fl.setPower(0);
    fr.setPower(0);
  }

  /**
   * Describe this function...
   */
  private void Detect() {
  }

  /**
   * Describe this function...
   */
  private void encoderdriveturn(int BackTarget, int FrontTarget, double BackSpeed, double FrontSpeed) {
    bl.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    br.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    br.setTargetPosition(-BackTarget);
    bl.setTargetPosition(BackTarget);
    bl.setMode(DcMotor.RunMode.RUN_TO_POSITION);
    br.setMode(DcMotor.RunMode.RUN_TO_POSITION);
    bl.setPower(BackSpeed);
    br.setPower(BackSpeed);
    while (opModeIsActive() && bl.isBusy() && br.isBusy()) {
      idle();
    }
  }
}
